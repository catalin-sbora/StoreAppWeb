// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreAppWeb.EFDataAccess;

namespace StoreAppWeb.EFDataAccess.Migrations
{
    [DbContext(typeof(StoreAppDbContext))]
    partial class StoreAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Administrator", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LastCashRegister")
                        .HasColumnType("int");

                    b.Property<string>("PersonId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("StoreId");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.CashRegister", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrentReceiptId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentReceiptId");

                    b.HasIndex("StoreId");

                    b.ToTable("CashRegister");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Receipt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CashRegisterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CashRegisterId");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.ReceiptItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("PricePerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptItems");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Seller", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PersonalDataId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PersonalDataId");

                    b.HasIndex("StoreId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Stock", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.StockItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockId");

                    b.ToTable("StockItems");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StockId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Administrator", b =>
                {
                    b.HasOne("StoreAppWeb.Domain.Model.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("StoreAppWeb.Domain.Model.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Person");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.CashRegister", b =>
                {
                    b.HasOne("StoreAppWeb.Domain.Model.Receipt", "CurrentReceipt")
                        .WithMany()
                        .HasForeignKey("CurrentReceiptId");

                    b.HasOne("StoreAppWeb.Domain.Model.Store", null)
                        .WithMany("CashRegisters")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CurrentReceipt");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Receipt", b =>
                {
                    b.HasOne("StoreAppWeb.Domain.Model.CashRegister", null)
                        .WithMany("Receipts")
                        .HasForeignKey("CashRegisterId");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.ReceiptItem", b =>
                {
                    b.HasOne("StoreAppWeb.Domain.Model.Receipt", null)
                        .WithMany("Items")
                        .HasForeignKey("ReceiptId");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Seller", b =>
                {
                    b.HasOne("StoreAppWeb.Domain.Model.Person", "PersonalData")
                        .WithMany()
                        .HasForeignKey("PersonalDataId");

                    b.HasOne("StoreAppWeb.Domain.Model.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("PersonalData");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.StockItem", b =>
                {
                    b.HasOne("StoreAppWeb.Domain.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("StoreAppWeb.Domain.Model.Stock", null)
                        .WithMany("StockItems")
                        .HasForeignKey("StockId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Store", b =>
                {
                    b.HasOne("StoreAppWeb.Domain.Model.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.CashRegister", b =>
                {
                    b.Navigation("Receipts");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Receipt", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Stock", b =>
                {
                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("StoreAppWeb.Domain.Model.Store", b =>
                {
                    b.Navigation("CashRegisters");
                });
#pragma warning restore 612, 618
        }
    }
}
